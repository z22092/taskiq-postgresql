[project]
name = "taskiq-postgresql"
version = "0.4.0"
description = "PostgreSQL integration for taskiq"
readme = "README.md"
authors = [
    { name = "jeffersonsilva-mb", email = "jefferson.silva@mb.com.br" },
    { name = "Jefferson Venceslau", email = "jeff.venceslau@gmail.com" }
]
dependencies = ["taskiq>=0.11.7"]
license = "MIT"
requires-python = ">= 3.9"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Framework :: AsyncIO",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Topic :: System :: Networking",
    "Typing :: Typed",
    "Operating System :: OS Independent",
]
homepage = "https://github.com/z22092/taskiq-postgresql"
repository = "https://github.com/z22092/taskiq-postgresql"
keywords = [
    "taskiq",
    "tasks",
    "distributed",
    "async",
    "postgresql",
    "asyncpg",
    "psqlpy",
    "psycopg3",
]
packages = [{ include = "taskiq_postgresql" }]

[project.optional-dependencies]
asyncpg = [
    "asyncpg>=0.30.0",
]

psqlpy = [
    "psqlpy>=0.11.3",
]
psycopg = [
    "psycopg[binary,pool]>=3.2.9",
]


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
managed = true
dev-dependencies = [
    "ruff>=0.6.9",
    "pytest>=8.3.3",
    "pytest-cov>=5.0.0",
    "pytest-env>=1.1.5",
    "asyncpg-stubs>=0.29.1",
    "pre-commit>=4.0.1",
    "pytest-xdist>=3.6.1",
    "flake8>=7.1.1",
    "autoflake>=2.3.1",
    "yesqa>=1.5.0",
    "anyio>=4.6.2.post1",
    "wemake-python-styleguide>=0.19.2",
    "black>=24.10.0",
    "twine>=5.1.1",
    "pytest-timeout>=2.4.0",
]
no-sources = false

[tool.uv.pip]
generate-hashes = true

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["taskiq_postgresql"]


[tool.ruff.format]
exclude = [".venv/"]

[tool.ruff.lint]
select  = [
    "E",   # Error
    "F",   # Pyflakes
    "W",   # Pycodestyle
    "C90", # McCabe complexity
    "I",   # Isort
    "N",   # pep8-naming
    "D",   # Pydocstyle
    "ANN", # Pytype annotations
    "S",   # Bandit
    "B",   # Bugbear
    "COM", # Commas
    "C4",  # Comprehensions
    "ISC", # Implicit string concat
    "PIE", # Unnecessary code
    "T20", # Catch prints
    "PYI", # validate pyi files
    "Q",   # Checks for quotes
    "RSE", # Checks raise statements
    "RET", # Checks return statements
    "SLF", # Self checks
    "SIM", # Simplificator
    "PTH", # Pathlib checks
    "ERA", # Checks for commented out code
    "PL",  # PyLint checks
    "RUF", # Specific to Ruff checks
]
ignore = [
    "D105",    # Missing docstring in magic method
    "D107",    # Missing docstring in __init__
    "D212",    # Multi-line docstring summary should start at the first line
    "D401",    # First line should be in imperative mood
    "D104",    # Missing docstring in public package
    "D100",    # Missing docstring in public module
    "ANN401",  # typing.Any are disallowed in `**kwargs
    "PLR0913", # Too many arguments for function call
    "D106",    # Missing docstring in public nested class
    "COM812",  # Use of assert detected
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["taskiq_dependencies.Depends", "taskiq.TaskiqDepends"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",   # Use of assert detected
    "S301",   # Use of pickle detected
    "D103",   # Missing docstring in public function
    "SLF001", # Private member accessed
    "S311",   # Standard pseudo-random generators are not suitable for security/cryptographic purposes
    "D101",   # Missing docstring in public class
]
"scripts/*" = [
    "S101",   # Use of assert detected
    "S301",   # Use of pickle detected
    "D103",   # Missing docstring in public function
    "SLF001", # Private member accessed
    "S311",   # Standard pseudo-random generators are not suitable for security/cryptographic purposes
    "D101",   # Missing docstring in public class
    "T201",   # Use of assert detected
    "S603",   # Use of subprocess.run detected
]

[tool.bumpversion]
current_version = "0.4.0"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
tag = false
sign_tags = false
tag_name = "{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = false
commit = false
message = "Bump version: {current_version} → {new_version}"
commit_args = ""
